#!/usr/bin/julia
module jcompWrapper

using PackageCompiler, Comonicon, Dates, Pkg, ShareAdd
const DEFAULT_DIR = "$(ENV["HOME"])/.julia/sysimages"
const NOW = Dates.now()
const JCOMP_TMP = "/tmp/jcomp"
"""

jcomp: configure and compile julia sysimages for you.

# Args

- `env`: julia enviroment that the sysimage is being created for (will use the Pkg.activate default if not supplied).
# Options

- `-p, --precompile-trace=<path>`: precompile statements file for sysimage creation.
- `-e, --excluded=<list>`: comma seperated list (ex. Package1,Pack2,Mypack)of packages to exclude from sysimage creation.
- `-n, --name=<sysimage1.so>`: specify path for output sysimage, defaults to jcomp-$(NOW)-sysimage.so.
- `--trace-exclude=<list>` : comma seperated list with values, and any lines with the values will be ignored from the supplied trace file.
- `--sysimg-dir=<path>`: location for output sysimage files, defaults to $(DEFAULT_DIR).
- `-t, --threads=<int>`: Threads to supply for the compilation, default is auto

# Flags
- `-d, --dry-run`: only show commands, do not run anything.
- `-v, --verbose`: verbose output.
- `--debug`: print additional debugging information 
"""
@Comonicon.main function jcomp(env=nothing;
    precompile_trace=nothing,
    excluded=nothing,
    name="jcomp-$(NOW)-sysimage.so",
    trace_exclude=nothing,
    sysimg_dir=DEFAULT_DIR,
    threads="auto",
    dry_run::Bool=false,
    verbose::Bool=false,
    debug::Bool=false,
)
    
    try
    try
        ENV["JCOMP_ENV"]

    catch
        println("Please set JCOMP_ENV")
        exit(1)
    end
    cmd_pwd = pwd()
    # local var
    trace = precompile_trace

    if debug
        println("JCOMP_ENV: $(ENV["JCOMP_ENV"])")
        println("Pwd: $(cmd_pwd)")
        println("Args:")
        println("  j_env: $(env)")
        println("  trace: $(trace)")
        println("  excluded: $(excluded)")
        println("  name: $(name)")
        println("  trace_exclude: $(trace_exclude)")
        println("  dir: $(sysimg_dir)")
        println("  verbose: $(verbose)")
        println("  dry_run: $(dry_run)")
    end

    # Check for, and make if needed sysimage directory
    try
        cd(readdir,sysimg_dir)
        verbose && print("Sysimg dir $(sysimg_dir) found\n")
    catch error
        # make dir if not present
        if isa(error, Base.IOError)
            verbose && print("Making directory $(sysimg_dir)\n")
            try
                if !dry_run 
                    mkdir(sysimg_dir)
                else
                    println("mkdir $(sysimg_dir)")
                end
            catch error2
                print("Error making directory\n")
                throw(error2)
            end
        else
            # error not handled
            throw(error)
        end
    end
    
    # Init env for packages
    _env = env # local variable to make editable
    if isnothing(env) # check if env is set, otherwise use cmd_pwd
        _env = cmd_pwd
    end
    println("Activating $(_env) julia enviroment")
    verbose && println("""Pkg.activate("$(_env)")""")
    Pkg.activate(_env)
    

    # get packages
    packages::Vector{String} = collect(ShareAdd.current_env().pkgs)
    verbose && println("Found packages: $(packages)")
    # remove excluded if present
    if !isnothing(excluded)
        filter!(p->!contains(excluded,p),packages)
        verbose && println("Packages excluded, now: $(packages)")
    end

    # Instantiate target project
    Pkg.instantiate()

    # edgecase, no packages to compile 
    if length(packages) == 0
        println("No packages to compile, exiting...")
        exit()
    end

    # return back to this enviroment
    verbose && println("Returning back to original enviroment")
    Pkg.activate(ENV["JCOMP_ENV"])

    # define sysimg creation function 
    # create sysimage without tracefile
    sysimg_cmd = """Creating sysimage file: PackageCompiler.create_sysimage($(packages);project="$(_env)",sysimage_path="$(sysimg_dir)/$(name))"""
    sysimg_config = "project=\"$(_env)\",sysimage_path=\"$(sysimg_dir)/$(name)\""
    function start_sysimg()
        out = "$JCOMP_TMP/jcomp-$NOW"
        out_last = "$JCOMP_TMP/jcomp-last"

        # verbose && println("Starting subprocess to create sysimg")
        script = "using Pkg;Pkg.instantiate();using PackageCompiler; println(\"Starting sysimg creation\");PackageCompiler.create_sysimage($packages; $sysimg_config)"
        cmd = """# Generated by jcomp\n$(ENV["JULIA_EXECUTABLE_PATH"]) -t $threads --project=\'$(_env)\' -e '$(script)' \n"""
        verbose && println(`$(cmd)`)
        verbose && println("Sending command to $out")
        try
            cd(readdir,JCOMP_TMP)
        catch
            mkdir(JCOMP_TMP)
        end
        out = "$JCOMP_TMP/jcomp-$NOW"
        out_last = "$JCOMP_TMP/jcomp-last"
        io = open(out, "w")

        write(io,cmd)
        close(io)
       
        io = open(out_last, "w")
        write(io,cmd)
        close(io)
       
        run(`/bin/chmod +x $out`)
        run(`/bin/chmod +x $out_last`)
        println("\nTo start the compiler, run:\n$out_last")
    end

    # Helper to check if a line contains any of the strings in a list
    function lineContains(line,ex)
        for ex in exclude_list
            if contains(line,ex)
                return true
            end
        end
        return false
    end

    # filter tracefile if needed, make sysimage
    if !isnothing(trace) 
        if !isnothing(trace_exclude)
            # trace present, and exclusion present 
            excluded_trace_dir = tempname()
            f = joinpath(excluded_trace_dir,"trace.jl")
            exclude_list = split(trace_exclude,",")
            try   
                if verbose
                    println(Cmd([`mkdir`, excluded_trace_dir]))
                end
  
                run(Cmd([`mkdir`, excluded_trace_dir]))
                open(trace,"r") do infile
                    open(f,"w") do outfile
                        for line in eachline(infile)
                            !lineContains(line,exclude_list) && println(outfile,line)
                        end
                    end
                end
                println("Excluded trace file at $f")
                
                # global trace
                trace = f
            catch err
                println("trace_exclude error")
                throw(err)
            end
        end

        # create sysimage with trace file
        sysimg_cmd = """Creating sysimage file: PackageCompiler.create_sysimage($(packages);project="$(_env)",sysimage_path="$(sysimg_dir)/$(name)",precompile_statements_file=$(trace))"""
        sysimg_config = "project=\"$(_env)\",sysimage_path=\"$(sysimg_dir)/$(name)\",precompile_statements_file=\"$trace\""

    end
    
    # Start sysimg creation
    (verbose) && println(sysimg_cmd)
    # Print what packages will be compiled
    length(packages) == 1 ? println("Package to compile:
$(packages[1])") : 
    # Print what packages will be compiled
    println("Packages to compile:\n$(reduce((x,y)->x*", "*y,packages[2:end];init=packages[1]))")
    
    try
        start_sysimg()
    catch err
        println("Error making sysimage")
        throw(err )
    end

    # Verify sysimage creation
    # (verbose || dry_run) && println("Verifying sysimage creation")
    # if dry_run
    #     println("file $(dir)/$(name)")
    # else
    #     verify = run(`file $(dir)/$(name)`)
    #     if contains("cannot open",verify)
    #         println("sysimage creation failed")
    #     else
    #         println("Sysimage created at $(dir)/$(name)")
    #     end
    # end

    catch err
        if isa(err,InterruptException)
            println("\nExiting...")
            exit()
        else
            verbose && println("\n$(err)")
            exit()
        end
    end

end 
end